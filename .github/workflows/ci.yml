name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch: {}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.24', '1.25' ]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Setup development environment
      run: make dev-setup

    - name: Run tests
      run: make test

    - name: Upload coverage reports to Codecov
      if: matrix.go-version == '1.24'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.ARGON_GHCR_PAT  }}

    - name: Build and push to GitHub Container Registry
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ghcr.io/argon-chat/kineticafs:${{ github.run_number }}

  # security:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
  #   needs: test

  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0

  #   - name: Set up Go
  #     uses: actions/setup-go@v5
  #     with:
  #       go-version: '1.24'

  #   - name: Setup development environment
  #     run: make dev-setup

  #   - name: Run security scan
  #     run: make security
  #     continue-on-error: true

  #   - name: Run Trivy vulnerability scanner
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       scan-type: 'fs'
  #       scan-ref: '.'
  #       format: 'sarif'
  #       output: 'trivy-results.sarif'

  #   - name: Upload Trivy scan results to GitHub Security tab
  #     uses: github/codeql-action/upload-sarif@v3
  #     if: always()
  #     with:
  #       sarif_file: 'trivy-results.sarif'