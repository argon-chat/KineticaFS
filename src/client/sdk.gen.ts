// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { BootstrapAdminTokenData, BootstrapAdminTokenErrors, BootstrapAdminTokenResponses, CreateBucketData, CreateBucketErrors, CreateBucketResponses, CreateServiceTokenData, CreateServiceTokenErrors, CreateServiceTokenResponses, DecrementFileRefData, DecrementFileRefErrors, DecrementFileRefResponses, DeleteBucketData, DeleteBucketErrors, DeleteBucketResponses, DeleteFileData, DeleteFileErrors, DeleteFileResponses, DeleteServiceTokenData, DeleteServiceTokenErrors, DeleteServiceTokenResponses, FinalizeFileUploadData, FinalizeFileUploadErrors, FinalizeFileUploadResponses, FirstRunCheckData, FirstRunCheckErrors, FirstRunCheckResponses, GetBucketData, GetBucketErrors, GetBucketResponses, GetFileByIdData, GetFileByIdErrors, GetFileByIdResponses, GetServiceTokenData, GetServiceTokenErrors, GetServiceTokenResponses, IncrementFileRefData, IncrementFileRefErrors, IncrementFileRefResponses, InitiateFileUploadData, InitiateFileUploadErrors, InitiateFileUploadResponses, ListAllServiceTokensData, ListAllServiceTokensErrors, ListAllServiceTokensResponses, ListBucketsData, ListBucketsErrors, ListBucketsResponses, UpdateBucketData, UpdateBucketErrors, UpdateBucketResponses, UploadFileBlobData, UploadFileBlobErrors, UploadFileBlobResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List buckets
 * List all S3 buckets
 */
export const listBuckets = <ThrowOnError extends boolean = false>(options: Options<ListBucketsData, ThrowOnError>) => {
    return (options.client ?? client).get<ListBucketsResponses, ListBucketsErrors, ThrowOnError>({
        url: '/api/v1/bucket/',
        ...options
    });
};

/**
 * Create bucket
 * Create a new S3 bucket. Only admin users can create buckets.
 */
export const createBucket = <ThrowOnError extends boolean = false>(options: Options<CreateBucketData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateBucketResponses, CreateBucketErrors, ThrowOnError>({
        url: '/api/v1/bucket/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete bucket
 * Delete a bucket by ID. Only admin users can delete buckets.
 */
export const deleteBucket = <ThrowOnError extends boolean = false>(options: Options<DeleteBucketData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteBucketResponses, DeleteBucketErrors, ThrowOnError>({
        url: '/api/v1/bucket/{id}',
        ...options
    });
};

/**
 * Get bucket
 * Get a bucket by ID
 */
export const getBucket = <ThrowOnError extends boolean = false>(options: Options<GetBucketData, ThrowOnError>) => {
    return (options.client ?? client).get<GetBucketResponses, GetBucketErrors, ThrowOnError>({
        url: '/api/v1/bucket/{id}',
        ...options
    });
};

/**
 * Update bucket
 * Update a bucket by ID. Only admin users can update buckets.
 */
export const updateBucket = <ThrowOnError extends boolean = false>(options: Options<UpdateBucketData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateBucketResponses, UpdateBucketErrors, ThrowOnError>({
        url: '/api/v1/bucket/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Initiate file upload
 * Initiate a new file upload. Receives regionId and bucketCode, returns a pre-signed upload URL and TTL (seconds). Admin access required.
 */
export const initiateFileUpload = <ThrowOnError extends boolean = false>(options: Options<InitiateFileUploadData, ThrowOnError>) => {
    return (options.client ?? client).post<InitiateFileUploadResponses, InitiateFileUploadErrors, ThrowOnError>({
        url: '/api/v1/file/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Finalize file upload
 * Finalize a file upload after client notifies server. Admin access required.
 */
export const finalizeFileUpload = <ThrowOnError extends boolean = false>(options: Options<FinalizeFileUploadData, ThrowOnError>) => {
    return (options.client ?? client).post<FinalizeFileUploadResponses, FinalizeFileUploadErrors, ThrowOnError>({
        url: '/api/v1/file/{blob}/finalize',
        ...options
    });
};

/**
 * Delete file
 * Delete a file by ID. Removes the file from S3 storage and then deletes the database record. Admin access required.
 */
export const deleteFile = <ThrowOnError extends boolean = false>(options: Options<DeleteFileData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteFileResponses, DeleteFileErrors, ThrowOnError>({
        url: '/api/v1/file/{id}',
        ...options
    });
};

/**
 * Get file by ID
 * Retrieve detailed information about a file by its ID, including metadata, size, content type, and reference count. Admin access required.
 */
export const getFileById = <ThrowOnError extends boolean = false>(options: Options<GetFileByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetFileByIdResponses, GetFileByIdErrors, ThrowOnError>({
        url: '/api/v1/file/{id}',
        ...options
    });
};

/**
 * Decrement file reference count
 * Atomically decrements the reference count for a file. Used for tracking how many clients are using a file. When reference count reaches zero, the file may be eligible for garbage collection. Requires authentication.
 */
export const decrementFileRef = <ThrowOnError extends boolean = false>(options: Options<DecrementFileRefData, ThrowOnError>) => {
    return (options.client ?? client).patch<DecrementFileRefResponses, DecrementFileRefErrors, ThrowOnError>({
        url: '/api/v1/file/{id}/decrement',
        ...options
    });
};

/**
 * Increment file reference count
 * Atomically increments the reference count for a file. Used for tracking how many clients are using a file. Requires authentication.
 */
export const incrementFileRef = <ThrowOnError extends boolean = false>(options: Options<IncrementFileRefData, ThrowOnError>) => {
    return (options.client ?? client).patch<IncrementFileRefResponses, IncrementFileRefErrors, ThrowOnError>({
        url: '/api/v1/file/{id}/increment',
        ...options
    });
};

/**
 * List all service tokens
 * List all service tokens (admin only).
 */
export const listAllServiceTokens = <ThrowOnError extends boolean = false>(options: Options<ListAllServiceTokensData, ThrowOnError>) => {
    return (options.client ?? client).get<ListAllServiceTokensResponses, ListAllServiceTokensErrors, ThrowOnError>({
        url: '/api/v1/st/',
        ...options
    });
};

/**
 * Create service token
 * Create a new service token. Only one admin token can exist. Only admin can create/delete other tokens. Admin token cannot be deleted.
 */
export const createServiceToken = <ThrowOnError extends boolean = false>(options: Options<CreateServiceTokenData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateServiceTokenResponses, CreateServiceTokenErrors, ThrowOnError>({
        url: '/api/v1/st/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Bootstrap admin token
 * Create the initial admin service token. Only allowed if no admin token exists. Used for first-time setup.
 */
export const bootstrapAdminToken = <ThrowOnError extends boolean = false>(options?: Options<BootstrapAdminTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<BootstrapAdminTokenResponses, BootstrapAdminTokenErrors, ThrowOnError>({
        url: '/api/v1/st/bootstrap',
        ...options
    });
};

/**
 * Check if admin token has already been created
 * Returns whether the admin token exists. Used to determine if setup is required.
 */
export const firstRunCheck = <ThrowOnError extends boolean = false>(options?: Options<FirstRunCheckData, ThrowOnError>) => {
    return (options?.client ?? client).get<FirstRunCheckResponses, FirstRunCheckErrors, ThrowOnError>({
        url: '/api/v1/st/first-run',
        ...options
    });
};

/**
 * Delete service token
 * Delete a service token by ID. Only admin can delete other tokens. Admin token cannot be deleted.
 */
export const deleteServiceToken = <ThrowOnError extends boolean = false>(options: Options<DeleteServiceTokenData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteServiceTokenResponses, DeleteServiceTokenErrors, ThrowOnError>({
        url: '/api/v1/st/{id}',
        ...options
    });
};

/**
 * Get service token
 * Get a service token by ID
 */
export const getServiceToken = <ThrowOnError extends boolean = false>(options: Options<GetServiceTokenData, ThrowOnError>) => {
    return (options.client ?? client).get<GetServiceTokenResponses, GetServiceTokenErrors, ThrowOnError>({
        url: '/api/v1/st/{id}',
        ...options
    });
};

/**
 * Upload file data
 * Upload file data using the blob ID provided by the server. Supports stream, form-data, and multipart uploads. No admin access required.
 */
export const uploadFileBlob = <ThrowOnError extends boolean = false>(options: Options<UploadFileBlobData, ThrowOnError>) => {
    return (options.client ?? client).patch<UploadFileBlobResponses, UploadFileBlobErrors, ThrowOnError>({
        bodySerializer: null,
        url: '/api/v1/upload/{blob}',
        ...options,
        headers: {
            'Content-Type': 'application/octet-stream',
            ...options.headers
        }
    });
};
