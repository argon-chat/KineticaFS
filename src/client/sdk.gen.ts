// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { DeleteV1BucketByIdData, DeleteV1BucketByIdErrors, DeleteV1BucketByIdResponses, DeleteV1FileByIdData, DeleteV1FileByIdErrors, DeleteV1FileByIdResponses, DeleteV1StByIdData, DeleteV1StByIdErrors, DeleteV1StByIdResponses, GetV1BucketByIdData, GetV1BucketByIdErrors, GetV1BucketByIdResponses, GetV1BucketData, GetV1BucketErrors, GetV1BucketResponses, GetV1StByIdData, GetV1StByIdErrors, GetV1StByIdResponses, GetV1StData, GetV1StErrors, GetV1StFirstRunData, GetV1StFirstRunErrors, GetV1StFirstRunResponses, GetV1StResponses, PatchV1BucketByIdData, PatchV1BucketByIdErrors, PatchV1BucketByIdResponses, PatchV1UploadByBlobData, PatchV1UploadByBlobErrors, PatchV1UploadByBlobResponses, PostV1BucketData, PostV1BucketErrors, PostV1BucketResponses, PostV1FileByIdFinalizeData, PostV1FileByIdFinalizeErrors, PostV1FileByIdFinalizeResponses, PostV1FileData, PostV1FileErrors, PostV1FileResponses, PostV1StBootstrapData, PostV1StBootstrapErrors, PostV1StBootstrapResponses, PostV1StData, PostV1StErrors, PostV1StResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List buckets
 * List all S3 buckets
 */
export const getV1Bucket = <ThrowOnError extends boolean = false>(options: Options<GetV1BucketData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV1BucketResponses, GetV1BucketErrors, ThrowOnError>({
        url: '/v1/bucket/',
        ...options
    });
};

/**
 * Create bucket
 * Create a new S3 bucket. Only admin users can create buckets.
 */
export const postV1Bucket = <ThrowOnError extends boolean = false>(options: Options<PostV1BucketData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1BucketResponses, PostV1BucketErrors, ThrowOnError>({
        url: '/v1/bucket/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete bucket
 * Delete a bucket by ID. Only admin users can delete buckets.
 */
export const deleteV1BucketById = <ThrowOnError extends boolean = false>(options: Options<DeleteV1BucketByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteV1BucketByIdResponses, DeleteV1BucketByIdErrors, ThrowOnError>({
        url: '/v1/bucket/{id}',
        ...options
    });
};

/**
 * Get bucket
 * Get a bucket by ID
 */
export const getV1BucketById = <ThrowOnError extends boolean = false>(options: Options<GetV1BucketByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV1BucketByIdResponses, GetV1BucketByIdErrors, ThrowOnError>({
        url: '/v1/bucket/{id}',
        ...options
    });
};

/**
 * Update bucket
 * Update a bucket by ID. Only admin users can update buckets.
 */
export const patchV1BucketById = <ThrowOnError extends boolean = false>(options: Options<PatchV1BucketByIdData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchV1BucketByIdResponses, PatchV1BucketByIdErrors, ThrowOnError>({
        url: '/v1/bucket/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Initiate file upload
 * Initiate a new file upload. Receives regionId and bucketCode, returns a pre-signed upload URL and TTL (seconds). Admin access required.
 */
export const postV1File = <ThrowOnError extends boolean = false>(options: Options<PostV1FileData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1FileResponses, PostV1FileErrors, ThrowOnError>({
        url: '/v1/file/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete file
 * Delete a file by ID. Admin access required.
 */
export const deleteV1FileById = <ThrowOnError extends boolean = false>(options: Options<DeleteV1FileByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteV1FileByIdResponses, DeleteV1FileByIdErrors, ThrowOnError>({
        url: '/v1/file/{id}',
        ...options
    });
};

/**
 * Finalize file upload
 * Finalize a file upload after client notifies server. Admin access required.
 */
export const postV1FileByIdFinalize = <ThrowOnError extends boolean = false>(options: Options<PostV1FileByIdFinalizeData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1FileByIdFinalizeResponses, PostV1FileByIdFinalizeErrors, ThrowOnError>({
        url: '/v1/file/{id}/finalize',
        ...options
    });
};

/**
 * List all service tokens
 * List all service tokens (admin only).
 */
export const getV1St = <ThrowOnError extends boolean = false>(options: Options<GetV1StData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV1StResponses, GetV1StErrors, ThrowOnError>({
        url: '/v1/st/',
        ...options
    });
};

/**
 * Create service token
 * Create a new service token. Only one admin token can exist. Only admin can create/delete other tokens. Admin token cannot be deleted.
 */
export const postV1St = <ThrowOnError extends boolean = false>(options: Options<PostV1StData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1StResponses, PostV1StErrors, ThrowOnError>({
        url: '/v1/st/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Bootstrap admin token
 * Create the initial admin service token. Only allowed if no admin token exists. Used for first-time setup.
 */
export const postV1StBootstrap = <ThrowOnError extends boolean = false>(options?: Options<PostV1StBootstrapData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostV1StBootstrapResponses, PostV1StBootstrapErrors, ThrowOnError>({
        url: '/v1/st/bootstrap',
        ...options
    });
};

/**
 * Check if admin token has already been created
 * Returns whether the admin token exists. Used to determine if setup is required.
 */
export const getV1StFirstRun = <ThrowOnError extends boolean = false>(options?: Options<GetV1StFirstRunData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV1StFirstRunResponses, GetV1StFirstRunErrors, ThrowOnError>({
        url: '/v1/st/first-run',
        ...options
    });
};

/**
 * Delete service token
 * Delete a service token by ID. Only admin can delete other tokens. Admin token cannot be deleted.
 */
export const deleteV1StById = <ThrowOnError extends boolean = false>(options: Options<DeleteV1StByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteV1StByIdResponses, DeleteV1StByIdErrors, ThrowOnError>({
        url: '/v1/st/{id}',
        ...options
    });
};

/**
 * Get service token
 * Get a service token by ID
 */
export const getV1StById = <ThrowOnError extends boolean = false>(options: Options<GetV1StByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV1StByIdResponses, GetV1StByIdErrors, ThrowOnError>({
        url: '/v1/st/{id}',
        ...options
    });
};

/**
 * Upload file data
 * Upload file data using the blob ID provided by the server. Supports stream, form-data, and multipart uploads. No admin access required.
 */
export const patchV1UploadByBlob = <ThrowOnError extends boolean = false>(options: Options<PatchV1UploadByBlobData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchV1UploadByBlobResponses, PatchV1UploadByBlobErrors, ThrowOnError>({
        bodySerializer: null,
        url: '/v1/upload/{blob}',
        ...options,
        headers: {
            'Content-Type': 'application/octet-stream',
            ...options.headers
        }
    });
};
