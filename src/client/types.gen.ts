// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: string;
};

export type ModelsBucket = {
    access_key: string;
    created_at?: string;
    custom_config?: string;
    endpoint: string;
    id?: string;
    name: string;
    region: string;
    s3_provider?: string;
    secret_key: string;
    storage_type?: ModelsStorageType;
    updated_at?: string;
    use_ssl?: boolean;
};

export type ModelsFile = {
    bucket_id: string;
    checksum?: string;
    content_type?: string;
    created_at?: string;
    file_size?: number;
    file_size_limit?: number;
    finalized?: boolean;
    id?: string;
    metadata?: string;
    name: string;
    path?: string;
    references?: number;
    updated_at?: string;
};

export type ModelsServiceToken = {
    access_key: string;
    created_at?: string;
    id?: string;
    name: string;
    token_type?: ModelsTokenType;
    updated_at?: string;
};

export type ModelsStorageType = 0 | 1;

export type ModelsTokenType = 1 | 2;

export type RouterBucketInsertDto = {
    access_key: string;
    custom_config?: string;
    endpoint: string;
    name: string;
    region: string;
    s3_provider?: string;
    secret_key: string;
    storage_type?: ModelsStorageType;
    use_ssl?: boolean;
};

export type RouterCreateServiceTokenRequestDto = {
    name: string;
};

export type RouterErrorResponse = {
    code?: number;
    message?: string;
};

export type RouterInitiateFileUploadDto = {
    bucketCode?: string;
    fileSizeLimit?: number;
    regionId: string;
};

export type RouterInitiateFileUploadResponse = {
    /**
     * seconds
     */
    ttl?: number;
    url?: string;
};

export type ListBucketsData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/bucket/';
};

export type ListBucketsErrors = {
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
};

export type ListBucketsError = ListBucketsErrors[keyof ListBucketsErrors];

export type ListBucketsResponses = {
    /**
     * OK
     */
    200: Array<ModelsBucket>;
};

export type ListBucketsResponse = ListBucketsResponses[keyof ListBucketsResponses];

export type CreateBucketData = {
    /**
     * Bucket
     */
    body: RouterBucketInsertDto;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/bucket/';
};

export type CreateBucketErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
};

export type CreateBucketError = CreateBucketErrors[keyof CreateBucketErrors];

export type CreateBucketResponses = {
    /**
     * Created
     */
    201: ModelsBucket;
};

export type CreateBucketResponse = CreateBucketResponses[keyof CreateBucketResponses];

export type DeleteBucketData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * Bucket ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/bucket/{id}';
};

export type DeleteBucketErrors = {
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type DeleteBucketError = DeleteBucketErrors[keyof DeleteBucketErrors];

export type DeleteBucketResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetBucketData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * Bucket ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/bucket/{id}';
};

export type GetBucketErrors = {
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type GetBucketError = GetBucketErrors[keyof GetBucketErrors];

export type GetBucketResponses = {
    /**
     * OK
     */
    200: ModelsBucket;
};

export type GetBucketResponse = GetBucketResponses[keyof GetBucketResponses];

export type UpdateBucketData = {
    /**
     * Bucket
     */
    body: RouterBucketInsertDto;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * Bucket ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/bucket/{id}';
};

export type UpdateBucketErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type UpdateBucketError = UpdateBucketErrors[keyof UpdateBucketErrors];

export type UpdateBucketResponses = {
    /**
     * OK
     */
    200: ModelsBucket;
};

export type UpdateBucketResponse = UpdateBucketResponses[keyof UpdateBucketResponses];

export type InitiateFileUploadData = {
    /**
     * Upload initiation data
     */
    body: RouterInitiateFileUploadDto;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/file/';
};

export type InitiateFileUploadErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
};

export type InitiateFileUploadError = InitiateFileUploadErrors[keyof InitiateFileUploadErrors];

export type InitiateFileUploadResponses = {
    /**
     * Created
     */
    201: RouterInitiateFileUploadResponse;
};

export type InitiateFileUploadResponse = InitiateFileUploadResponses[keyof InitiateFileUploadResponses];

export type FinalizeFileUploadData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * Blob ID
         */
        blob: string;
    };
    query?: never;
    url: '/api/v1/file/{blob}/finalize';
};

export type FinalizeFileUploadErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type FinalizeFileUploadError = FinalizeFileUploadErrors[keyof FinalizeFileUploadErrors];

export type FinalizeFileUploadResponses = {
    /**
     * OK
     */
    200: ModelsFile;
};

export type FinalizeFileUploadResponse = FinalizeFileUploadResponses[keyof FinalizeFileUploadResponses];

export type DeleteFileData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * File ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/file/{id}';
};

export type DeleteFileErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
    /**
     * Internal Server Error
     */
    500: RouterErrorResponse;
};

export type DeleteFileError = DeleteFileErrors[keyof DeleteFileErrors];

export type DeleteFileResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetFileByIdData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * File ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/file/{id}';
};

export type GetFileByIdErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type GetFileByIdError = GetFileByIdErrors[keyof GetFileByIdErrors];

export type GetFileByIdResponses = {
    /**
     * OK
     */
    200: ModelsFile;
};

export type GetFileByIdResponse = GetFileByIdResponses[keyof GetFileByIdResponses];

export type DecrementFileRefData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * File ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/file/{id}/decrement';
};

export type DecrementFileRefErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type DecrementFileRefError = DecrementFileRefErrors[keyof DecrementFileRefErrors];

export type DecrementFileRefResponses = {
    /**
     * Reference count decremented successfully
     */
    204: unknown;
};

export type IncrementFileRefData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * File ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/file/{id}/increment';
};

export type IncrementFileRefErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type IncrementFileRefError = IncrementFileRefErrors[keyof IncrementFileRefErrors];

export type IncrementFileRefResponses = {
    /**
     * Reference count incremented successfully
     */
    204: unknown;
};

export type ListAllServiceTokensData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/st/';
};

export type ListAllServiceTokensErrors = {
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
};

export type ListAllServiceTokensError = ListAllServiceTokensErrors[keyof ListAllServiceTokensErrors];

export type ListAllServiceTokensResponses = {
    /**
     * OK
     */
    200: Array<ModelsServiceToken>;
};

export type ListAllServiceTokensResponse = ListAllServiceTokensResponses[keyof ListAllServiceTokensResponses];

export type CreateServiceTokenData = {
    /**
     * Service Token Request
     */
    body: RouterCreateServiceTokenRequestDto;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/st/';
};

export type CreateServiceTokenErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
};

export type CreateServiceTokenError = CreateServiceTokenErrors[keyof CreateServiceTokenErrors];

export type CreateServiceTokenResponses = {
    /**
     * Created
     */
    201: ModelsServiceToken;
};

export type CreateServiceTokenResponse = CreateServiceTokenResponses[keyof CreateServiceTokenResponses];

export type BootstrapAdminTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/st/bootstrap';
};

export type BootstrapAdminTokenErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Admin token already exists
     */
    409: RouterErrorResponse;
};

export type BootstrapAdminTokenError = BootstrapAdminTokenErrors[keyof BootstrapAdminTokenErrors];

export type BootstrapAdminTokenResponses = {
    /**
     * Created
     */
    201: ModelsServiceToken;
};

export type BootstrapAdminTokenResponse = BootstrapAdminTokenResponses[keyof BootstrapAdminTokenResponses];

export type FirstRunCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/st/first-run';
};

export type FirstRunCheckErrors = {
    /**
     * Internal server error
     */
    500: RouterErrorResponse;
};

export type FirstRunCheckError = FirstRunCheckErrors[keyof FirstRunCheckErrors];

export type FirstRunCheckResponses = {
    /**
     * first_run: true if no admin token exists, false otherwise
     */
    200: {
        [key: string]: boolean;
    };
};

export type FirstRunCheckResponse = FirstRunCheckResponses[keyof FirstRunCheckResponses];

export type DeleteServiceTokenData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * Token ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/st/{id}';
};

export type DeleteServiceTokenErrors = {
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type DeleteServiceTokenError = DeleteServiceTokenErrors[keyof DeleteServiceTokenErrors];

export type DeleteServiceTokenResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetServiceTokenData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * Token ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/st/{id}';
};

export type GetServiceTokenErrors = {
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type GetServiceTokenError = GetServiceTokenErrors[keyof GetServiceTokenErrors];

export type GetServiceTokenResponses = {
    /**
     * OK
     */
    200: ModelsServiceToken;
};

export type GetServiceTokenResponse = GetServiceTokenResponses[keyof GetServiceTokenResponses];

export type UploadFileBlobData = {
    /**
     * File data (raw stream, required if not using multipart/form-data)
     */
    body?: Array<number>;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * Blob ID
         */
        blob: string;
    };
    query?: never;
    url: '/api/v1/upload/{blob}';
};

export type UploadFileBlobErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type UploadFileBlobError = UploadFileBlobErrors[keyof UploadFileBlobErrors];

export type UploadFileBlobResponses = {
    /**
     * No Content
     */
    204: unknown;
};
