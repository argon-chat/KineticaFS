// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: string;
};

export type ModelsBucket = {
    access_key: string;
    created_at?: string;
    custom_config?: string;
    endpoint: string;
    id?: string;
    name: string;
    region: string;
    s3_provider?: string;
    secret_key: string;
    storage_type?: ModelsStorageType;
    updated_at?: string;
    use_ssl?: boolean;
};

export type ModelsFile = {
    bucket_id: string;
    checksum?: string;
    content_type?: string;
    created_at?: string;
    file_size?: number;
    id?: string;
    metadata?: string;
    name: string;
    path?: string;
    references?: number;
    updated_at?: string;
};

export type ModelsServiceToken = {
    access_key: string;
    created_at?: string;
    id?: string;
    name: string;
    token_type?: ModelsTokenType;
    updated_at?: string;
};

export type ModelsStorageType = 0 | 1;

export type ModelsTokenType = 1 | 2;

export type RouterBucketInsertDto = {
    access_key: string;
    custom_config?: string;
    endpoint: string;
    name: string;
    region: string;
    s3_provider?: string;
    secret_key: string;
    storage_type?: ModelsStorageType;
    use_ssl?: boolean;
};

export type RouterCreateServiceTokenRequestDto = {
    name: string;
};

export type RouterErrorResponse = {
    code?: number;
    message?: string;
};

export type RouterInitiateFileUploadDto = {
    bucketCode: string;
    regionId: string;
};

export type RouterInitiateFileUploadResponse = {
    /**
     * seconds
     */
    ttl?: number;
    url?: string;
};

export type GetV1BucketData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path?: never;
    query?: never;
    url: '/v1/bucket/';
};

export type GetV1BucketErrors = {
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
};

export type GetV1BucketError = GetV1BucketErrors[keyof GetV1BucketErrors];

export type GetV1BucketResponses = {
    /**
     * OK
     */
    200: Array<ModelsBucket>;
};

export type GetV1BucketResponse = GetV1BucketResponses[keyof GetV1BucketResponses];

export type PostV1BucketData = {
    /**
     * Bucket
     */
    body: RouterBucketInsertDto;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path?: never;
    query?: never;
    url: '/v1/bucket/';
};

export type PostV1BucketErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
};

export type PostV1BucketError = PostV1BucketErrors[keyof PostV1BucketErrors];

export type PostV1BucketResponses = {
    /**
     * Created
     */
    201: ModelsBucket;
};

export type PostV1BucketResponse = PostV1BucketResponses[keyof PostV1BucketResponses];

export type DeleteV1BucketByIdData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * Bucket ID
         */
        id: string;
    };
    query?: never;
    url: '/v1/bucket/{id}';
};

export type DeleteV1BucketByIdErrors = {
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type DeleteV1BucketByIdError = DeleteV1BucketByIdErrors[keyof DeleteV1BucketByIdErrors];

export type DeleteV1BucketByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetV1BucketByIdData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * Bucket ID
         */
        id: string;
    };
    query?: never;
    url: '/v1/bucket/{id}';
};

export type GetV1BucketByIdErrors = {
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type GetV1BucketByIdError = GetV1BucketByIdErrors[keyof GetV1BucketByIdErrors];

export type GetV1BucketByIdResponses = {
    /**
     * OK
     */
    200: ModelsBucket;
};

export type GetV1BucketByIdResponse = GetV1BucketByIdResponses[keyof GetV1BucketByIdResponses];

export type PatchV1BucketByIdData = {
    /**
     * Bucket
     */
    body: RouterBucketInsertDto;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * Bucket ID
         */
        id: string;
    };
    query?: never;
    url: '/v1/bucket/{id}';
};

export type PatchV1BucketByIdErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type PatchV1BucketByIdError = PatchV1BucketByIdErrors[keyof PatchV1BucketByIdErrors];

export type PatchV1BucketByIdResponses = {
    /**
     * OK
     */
    200: ModelsBucket;
};

export type PatchV1BucketByIdResponse = PatchV1BucketByIdResponses[keyof PatchV1BucketByIdResponses];

export type PostV1FileData = {
    /**
     * Upload initiation data
     */
    body: RouterInitiateFileUploadDto;
    path?: never;
    query?: never;
    url: '/v1/file/';
};

export type PostV1FileErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Forbidden
     */
    403: RouterErrorResponse;
};

export type PostV1FileError = PostV1FileErrors[keyof PostV1FileErrors];

export type PostV1FileResponses = {
    /**
     * Created
     */
    201: RouterInitiateFileUploadResponse;
};

export type PostV1FileResponse = PostV1FileResponses[keyof PostV1FileResponses];

export type DeleteV1FileByIdData = {
    body?: never;
    path: {
        /**
         * File ID
         */
        id: string;
    };
    query?: never;
    url: '/v1/file/{id}';
};

export type DeleteV1FileByIdErrors = {
    /**
     * Forbidden
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type DeleteV1FileByIdError = DeleteV1FileByIdErrors[keyof DeleteV1FileByIdErrors];

export type DeleteV1FileByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type PostV1FileByIdFinalizeData = {
    body?: never;
    path: {
        /**
         * File ID
         */
        id: string;
    };
    query?: never;
    url: '/v1/file/{id}/finalize';
};

export type PostV1FileByIdFinalizeErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Forbidden
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type PostV1FileByIdFinalizeError = PostV1FileByIdFinalizeErrors[keyof PostV1FileByIdFinalizeErrors];

export type PostV1FileByIdFinalizeResponses = {
    /**
     * OK
     */
    200: ModelsFile;
};

export type PostV1FileByIdFinalizeResponse = PostV1FileByIdFinalizeResponses[keyof PostV1FileByIdFinalizeResponses];

export type GetV1StData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path?: never;
    query?: never;
    url: '/v1/st/';
};

export type GetV1StErrors = {
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
};

export type GetV1StError = GetV1StErrors[keyof GetV1StErrors];

export type GetV1StResponses = {
    /**
     * OK
     */
    200: Array<ModelsServiceToken>;
};

export type GetV1StResponse = GetV1StResponses[keyof GetV1StResponses];

export type PostV1StData = {
    /**
     * Service Token Request
     */
    body: RouterCreateServiceTokenRequestDto;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path?: never;
    query?: never;
    url: '/v1/st/';
};

export type PostV1StErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
};

export type PostV1StError = PostV1StErrors[keyof PostV1StErrors];

export type PostV1StResponses = {
    /**
     * Created
     */
    201: ModelsServiceToken;
};

export type PostV1StResponse = PostV1StResponses[keyof PostV1StResponses];

export type PostV1StBootstrapData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/st/bootstrap';
};

export type PostV1StBootstrapErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Admin token already exists
     */
    409: RouterErrorResponse;
};

export type PostV1StBootstrapError = PostV1StBootstrapErrors[keyof PostV1StBootstrapErrors];

export type PostV1StBootstrapResponses = {
    /**
     * Created
     */
    201: ModelsServiceToken;
};

export type PostV1StBootstrapResponse = PostV1StBootstrapResponses[keyof PostV1StBootstrapResponses];

export type DeleteV1StByIdData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * Token ID
         */
        id: string;
    };
    query?: never;
    url: '/v1/st/{id}';
};

export type DeleteV1StByIdErrors = {
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type DeleteV1StByIdError = DeleteV1StByIdErrors[keyof DeleteV1StByIdErrors];

export type DeleteV1StByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetV1StByIdData = {
    body?: never;
    headers: {
        /**
         * API Token
         */
        'x-api-token': string;
    };
    path: {
        /**
         * Token ID
         */
        id: string;
    };
    query?: never;
    url: '/v1/st/{id}';
};

export type GetV1StByIdErrors = {
    /**
     * Unauthorized
     */
    401: RouterErrorResponse;
    /**
     * Forbidden - Admin only
     */
    403: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type GetV1StByIdError = GetV1StByIdErrors[keyof GetV1StByIdErrors];

export type GetV1StByIdResponses = {
    /**
     * OK
     */
    200: ModelsServiceToken;
};

export type GetV1StByIdResponse = GetV1StByIdResponses[keyof GetV1StByIdResponses];

export type PatchV1UploadByBlobData = {
    /**
     * File data (raw stream, required if not using multipart/form-data)
     */
    body?: Array<number>;
    path: {
        /**
         * Blob ID
         */
        blob: string;
    };
    query?: never;
    url: '/v1/upload/{blob}';
};

export type PatchV1UploadByBlobErrors = {
    /**
     * Bad Request
     */
    400: RouterErrorResponse;
    /**
     * Not Found
     */
    404: RouterErrorResponse;
};

export type PatchV1UploadByBlobError = PatchV1UploadByBlobErrors[keyof PatchV1UploadByBlobErrors];

export type PatchV1UploadByBlobResponses = {
    /**
     * No Content
     */
    204: unknown;
};
