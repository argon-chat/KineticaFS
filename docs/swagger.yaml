definitions:
  models.Bucket:
    properties:
      access_key:
        type: string
      created_at:
        type: string
      custom_config:
        type: string
      endpoint:
        type: string
      id:
        type: string
      name:
        type: string
      region:
        type: string
      s3_provider:
        type: string
      secret_key:
        type: string
      storage_type:
        $ref: '#/definitions/models.StorageType'
      updated_at:
        type: string
      use_ssl:
        type: boolean
    required:
    - access_key
    - endpoint
    - name
    - region
    - secret_key
    type: object
  models.File:
    properties:
      bucket_id:
        type: string
      checksum:
        type: string
      content_type:
        type: string
      created_at:
        type: string
      file_size:
        type: integer
      file_size_limit:
        type: integer
      finalized:
        type: boolean
      id:
        type: string
      metadata:
        type: string
      name:
        type: string
      path:
        type: string
      references:
        type: integer
      updated_at:
        type: string
    required:
    - bucket_id
    - name
    type: object
  models.ServiceToken:
    properties:
      access_key:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      token_type:
        $ref: '#/definitions/models.TokenType'
      updated_at:
        type: string
    required:
    - access_key
    - name
    type: object
  models.StorageType:
    enum:
    - 0
    - 1
    format: int32
    type: integer
    x-enum-varnames:
    - HotStorage
    - ColdStorage
  models.TokenType:
    enum:
    - 1
    - 2
    format: int32
    type: integer
    x-enum-varnames:
    - AdminToken
    - UserToken
  router.BucketInsertDTO:
    properties:
      access_key:
        type: string
      custom_config:
        type: string
      endpoint:
        type: string
      name:
        type: string
      region:
        type: string
      s3_provider:
        type: string
      secret_key:
        type: string
      storage_type:
        $ref: '#/definitions/models.StorageType'
      use_ssl:
        type: boolean
    required:
    - access_key
    - endpoint
    - name
    - region
    - secret_key
    type: object
  router.CreateServiceTokenRequestDto:
    properties:
      name:
        example: my-token
        type: string
    required:
    - name
    type: object
  router.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: error message
        type: string
    type: object
  router.InitiateFileUploadDTO:
    properties:
      bucketCode:
        type: string
      fileSizeLimit:
        type: integer
      regionId:
        type: string
    required:
    - regionId
    type: object
  router.InitiateFileUploadResponse:
    properties:
      ttl:
        description: seconds
        type: integer
      url:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/bucket/:
    get:
      description: List all S3 buckets
      operationId: ListBuckets
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Bucket'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: List buckets
      tags:
      - buckets
    post:
      consumes:
      - application/json
      description: Create a new S3 bucket. Only admin users can create buckets.
      operationId: CreateBucket
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      - description: Bucket
        in: body
        name: bucket
        required: true
        schema:
          $ref: '#/definitions/router.BucketInsertDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Bucket'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Create bucket
      tags:
      - buckets
  /api/v1/bucket/{id}:
    delete:
      description: Delete a bucket by ID. Only admin users can delete buckets.
      operationId: DeleteBucket
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      - description: Bucket ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Delete bucket
      tags:
      - buckets
    get:
      description: Get a bucket by ID
      operationId: GetBucket
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      - description: Bucket ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Bucket'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Get bucket
      tags:
      - buckets
    patch:
      consumes:
      - application/json
      description: Update a bucket by ID. Only admin users can update buckets.
      operationId: UpdateBucket
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      - description: Bucket ID
        in: path
        name: id
        required: true
        type: string
      - description: Bucket
        in: body
        name: bucket
        required: true
        schema:
          $ref: '#/definitions/router.BucketInsertDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Bucket'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Update bucket
      tags:
      - buckets
  /api/v1/file/:
    post:
      consumes:
      - application/json
      description: Initiate a new file upload. Receives regionId and bucketCode, returns
        a pre-signed upload URL and TTL (seconds). Admin access required.
      operationId: InitiateFileUpload
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      - description: Upload initiation data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/router.InitiateFileUploadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/router.InitiateFileUploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Initiate file upload
      tags:
      - files
  /api/v1/file/{blob}/finalize:
    post:
      description: Finalize a file upload after client notifies server. Admin access
        required.
      operationId: FinalizeFileUpload
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      - description: Blob ID
        in: path
        name: blob
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.File'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Finalize file upload
      tags:
      - files
  /api/v1/file/{id}:
    delete:
      description: Delete a file by ID. Removes the file from S3 storage and then
        deletes the database record. Admin access required.
      operationId: DeleteFile
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Delete file
      tags:
      - files
    get:
      consumes:
      - application/json
      description: Retrieve detailed information about a file by its ID, including
        metadata, size, content type, and reference count. Admin access required.
      operationId: GetFileById
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.File'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Get file by ID
      tags:
      - files
  /api/v1/file/{id}/decrement:
    patch:
      consumes:
      - application/json
      description: Atomically decrements the reference count for a file. Used for
        tracking how many clients are using a file. When reference count reaches zero
        or below, the file is automatically deleted from both S3 storage and database.
        Requires authentication.
      operationId: DecrementFileRef
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Reference count decremented successfully (and file deleted
            if count reached zero)
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "500":
          description: Internal error during file deletion
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Decrement file reference count
      tags:
      - files
  /api/v1/file/{id}/increment:
    patch:
      consumes:
      - application/json
      description: Atomically increments the reference count for a file. Used for
        tracking how many clients are using a file. Requires authentication.
      operationId: IncrementFileRef
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Reference count incremented successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Increment file reference count
      tags:
      - files
  /api/v1/st/:
    get:
      description: List all service tokens (admin only).
      operationId: ListAllServiceTokens
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ServiceToken'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: List all service tokens
      tags:
      - service-tokens
    post:
      consumes:
      - application/json
      description: Create a new service token. Only one admin token can exist. Only
        admin can create/delete other tokens. Admin token cannot be deleted.
      operationId: CreateServiceToken
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      - description: Service Token Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/router.CreateServiceTokenRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ServiceToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Create service token
      tags:
      - service-tokens
  /api/v1/st/{id}:
    delete:
      description: Delete a service token by ID. Only admin can delete other tokens.
        Admin token cannot be deleted.
      operationId: DeleteServiceToken
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      - description: Token ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Delete service token
      tags:
      - service-tokens
    get:
      description: Get a service token by ID
      operationId: GetServiceToken
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      - description: Token ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ServiceToken'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Get service token
      tags:
      - service-tokens
  /api/v1/st/bootstrap:
    post:
      description: Create the initial admin service token. Only allowed if no admin
        token exists. Used for first-time setup.
      operationId: BootstrapAdminToken
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ServiceToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "409":
          description: Admin token already exists
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Bootstrap admin token
      tags:
      - service-tokens
  /api/v1/st/first-run:
    get:
      description: Returns whether the admin token exists. Used to determine if setup
        is required.
      operationId: FirstRunCheck
      produces:
      - application/json
      responses:
        "200":
          description: 'first_run: true if no admin token exists, false otherwise'
          schema:
            additionalProperties:
              type: boolean
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Check if admin token has already been created
      tags:
      - service-tokens
  /api/v1/upload/{blob}:
    patch:
      consumes:
      - application/octet-stream
      - multipart/form-data
      - application/x-www-form-urlencoded
      description: Upload file data using the blob ID provided by the server. Supports
        stream, form-data, and multipart uploads. No admin access required.
      operationId: UploadFileBlob
      parameters:
      - description: API Token
        in: header
        name: x-api-token
        required: true
        type: string
      - description: Blob ID
        in: path
        name: blob
        required: true
        type: string
      - description: File data (multipart or form-data, required if not using raw
          stream)
        in: formData
        name: file
        type: file
      - description: File data (raw stream, required if not using multipart/form-data)
        in: body
        name: file
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Upload file data
      tags:
      - upload
swagger: "2.0"
