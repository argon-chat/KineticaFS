// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/bucket/": {
            "get": {
                "description": "List all S3 buckets",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "List buckets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Token",
                        "name": "x-api-token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Bucket"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin only",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new S3 bucket. Only admin users can create buckets.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "Create bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Token",
                        "name": "x-api-token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Bucket",
                        "name": "bucket",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.BucketInsertDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Bucket"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin only",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/bucket/{id}": {
            "get": {
                "description": "Get a bucket by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "Get bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Token",
                        "name": "x-api-token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Bucket"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin only",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a bucket by ID. Only admin users can delete buckets.",
                "tags": [
                    "buckets"
                ],
                "summary": "Delete bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Token",
                        "name": "x-api-token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin only",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a bucket by ID. Only admin users can update buckets.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "Update bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Token",
                        "name": "x-api-token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Bucket",
                        "name": "bucket",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.BucketInsertDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Bucket"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin only",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/file/": {
            "post": {
                "description": "Initiate a new file upload. Receives regionId and bucketCode, returns a pre-signed upload URL and TTL (seconds). Admin access required.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Initiate file upload",
                "parameters": [
                    {
                        "description": "Upload initiation data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.InitiateFileUploadDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/router.InitiateFileUploadResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/file/{id}": {
            "delete": {
                "description": "Delete a file by ID. Admin access required.",
                "tags": [
                    "files"
                ],
                "summary": "Delete file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/file/{id}/finalize": {
            "post": {
                "description": "Finalize a file upload after client notifies server. Admin access required.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Finalize file upload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.File"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/st/": {
            "get": {
                "description": "List all service tokens (admin only).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service-tokens"
                ],
                "summary": "List all service tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Token",
                        "name": "x-api-token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ServiceToken"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin only",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new service token. Only one admin token can exist. Only admin can create/delete other tokens. Admin token cannot be deleted.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service-tokens"
                ],
                "summary": "Create service token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Token",
                        "name": "x-api-token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Service Token Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.CreateServiceTokenRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin only",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/st/bootstrap": {
            "post": {
                "description": "Create the initial admin service token. Only allowed if no admin token exists. Used for first-time setup.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service-tokens"
                ],
                "summary": "Bootstrap admin token",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Admin token already exists",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/st/first-run": {
            "get": {
                "description": "Returns whether the admin token exists. Used to determine if setup is required.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service-tokens"
                ],
                "summary": "Check if admin token has already been created",
                "responses": {
                    "200": {
                        "description": "first_run: true if no admin token exists, false otherwise",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/st/{id}": {
            "get": {
                "description": "Get a service token by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service-tokens"
                ],
                "summary": "Get service token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Token",
                        "name": "x-api-token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceToken"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin only",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a service token by ID. Only admin can delete other tokens. Admin token cannot be deleted.",
                "tags": [
                    "service-tokens"
                ],
                "summary": "Delete service token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Token",
                        "name": "x-api-token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin only",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/upload/{blob}": {
            "patch": {
                "description": "Upload file data using the blob ID provided by the server. Supports stream, form-data, and multipart uploads. No admin access required.",
                "consumes": [
                    "application/octet-stream",
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "upload"
                ],
                "summary": "Upload file data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blob ID",
                        "name": "blob",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "File data (multipart or form-data, required if not using raw stream)",
                        "name": "file",
                        "in": "formData"
                    },
                    {
                        "description": "File data (raw stream, required if not using multipart/form-data)",
                        "name": "file",
                        "in": "body",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Bucket": {
            "type": "object",
            "required": [
                "access_key",
                "endpoint",
                "name",
                "region",
                "secret_key"
            ],
            "properties": {
                "access_key": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "custom_config": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "s3_provider": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                },
                "storage_type": {
                    "$ref": "#/definitions/models.StorageType"
                },
                "updated_at": {
                    "type": "string"
                },
                "use_ssl": {
                    "type": "boolean"
                }
            }
        },
        "models.File": {
            "type": "object",
            "required": [
                "bucket_id",
                "name"
            ],
            "properties": {
                "bucket_id": {
                    "type": "string"
                },
                "checksum": {
                    "type": "string"
                },
                "content_type": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "file_size": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "references": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.ServiceToken": {
            "type": "object",
            "required": [
                "access_key",
                "name"
            ],
            "properties": {
                "access_key": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "token_type": {
                    "$ref": "#/definitions/models.TokenType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.StorageType": {
            "type": "integer",
            "format": "int32",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "HotStorage",
                "ColdStorage"
            ]
        },
        "models.TokenType": {
            "type": "integer",
            "format": "int32",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "AdminToken",
                "UserToken"
            ]
        },
        "router.BucketInsertDTO": {
            "type": "object",
            "required": [
                "access_key",
                "endpoint",
                "name",
                "region",
                "secret_key"
            ],
            "properties": {
                "access_key": {
                    "type": "string"
                },
                "custom_config": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "s3_provider": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                },
                "storage_type": {
                    "$ref": "#/definitions/models.StorageType"
                },
                "use_ssl": {
                    "type": "boolean"
                }
            }
        },
        "router.CreateServiceTokenRequestDto": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "my-token"
                }
            }
        },
        "router.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "error message"
                }
            }
        },
        "router.InitiateFileUploadDTO": {
            "type": "object",
            "required": [
                "bucketCode",
                "regionId"
            ],
            "properties": {
                "bucketCode": {
                    "type": "string"
                },
                "regionId": {
                    "type": "string"
                }
            }
        },
        "router.InitiateFileUploadResponse": {
            "type": "object",
            "properties": {
                "ttl": {
                    "description": "seconds",
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
